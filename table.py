#!/usr/bin/env python3
"""table.py - Print stored cut-flow tables produced by lbyl selection scripts.

Usage examples
--------------
$ python3 table.py --sample alp4 --aco cr --path /home/jtong/lbyl
$ python3 table.py --sample signal           # defaults: aco=sr, path=.

This script looks for pickles named ``cutflow_<sample>_aco-<aco>.pkl`` that
were generated by the processing workflow.  It then re-uses the helper
utilities ``print_cutflow`` and ``print_aco_scan`` from *lbyl_common* to render
human-readable tables identical to those printed during the original run.
"""

import argparse
import os
import pickle
import sys
from lbyl_common import print_cutflow, print_aco_scan 

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

def _load_pickle(sample, aco, base_dir):
    """Return the un-pickled dictionary and the absolute file path loaded."""
    fname = f"cutflow_{sample}_aco-{aco}.pkl"
    path = os.path.abspath(os.path.join(base_dir, fname))
    if not os.path.isfile(path):
        raise FileNotFoundError(path)
    with open(path, "rb") as pf:
        data = pickle.load(pf)
    return data, path


# -----------------------------------------------------------------------------
# CLI entry‑point
# -----------------------------------------------------------------------------

def main():  # pragma: no cover
    parser = argparse.ArgumentParser(
        description="Pretty-print cut-flow and acoplanarity scan tables from stored pickle files."
    )
    parser.add_argument(
        "--sample",
        required=True,
        help="Sample identifier, e.g. alp4, signal, yyee, cep.",
    )
    parser.add_argument(
        "--aco",
        default="sr",
        choices=["sr", "cr", "sr_scan"],
        help="Acoplanarity mode: sr ≤0.01, cr ≥0.01, or sr_scan (scan table).",
    )
    parser.add_argument(
        "--path",
        default=".",
        help="Directory containing the pickled cut-flow results (default: current directory).",
    )

    args = parser.parse_args()
    sample = args.sample.lower()
    aco_mode = args.aco.lower()

    # ------------------------------------------------------------------
    # Load pickle and print tables.
    # ------------------------------------------------------------------
    try:
        result_dict, fpath = _load_pickle(sample, aco_mode, args.path)
    except FileNotFoundError:
        sys.stderr.write(
            f"Pickle not found for sample '{sample}' with aco='{aco_mode}' in '{args.path}'.\n"
        )
        sys.exit(1)

    # The historical pickles produced by our workflow store everything inside a
    # dictionary with keys cut_flow, aco_scan, …
    cut_flow = result_dict.get("cut_flow", result_dict)

    print(f"# Cut-flow summary for '{sample}' - aco={aco_mode}")
    print(f"# Source: {fpath}\n")
    print_cutflow(sample, cut_flow)

    if aco_mode == "sr_scan" and "aco_scan" in result_dict:
        print()
        print_aco_scan(result_dict["aco_scan"], header="Acoplanarity scan")


if __name__ == "__main__":
    main()
